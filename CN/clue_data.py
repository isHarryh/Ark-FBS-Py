# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_MeetingClueData_ClueData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MeetingClueData_ClueData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MeetingClueData_ClueData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MeetingClueData_ClueData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MeetingClueData_ClueData
    def ClueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_ClueData
    def ClueName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_ClueData
    def ClueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_ClueData
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MeetingClueData_ClueDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_MeetingClueData_ClueDataAddClueId(builder, clueId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clueId), 0)

def clz_Torappu_MeetingClueData_ClueDataAddClueName(builder, clueName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clueName), 0)

def clz_Torappu_MeetingClueData_ClueDataAddClueType(builder, clueType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(clueType), 0)

def clz_Torappu_MeetingClueData_ClueDataAddNumber(builder, number):
    builder.PrependInt32Slot(3, number, 0)

def clz_Torappu_MeetingClueData_ClueDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MeetingClueData_ClueTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MeetingClueData_ClueTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MeetingClueData_ClueTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MeetingClueData_ClueTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MeetingClueData_ClueTypeData
    def ClueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_ClueTypeData
    def ClueNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MeetingClueData_ClueTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_MeetingClueData_ClueTypeDataAddClueType(builder, clueType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clueType), 0)

def clz_Torappu_MeetingClueData_ClueTypeDataAddClueNumber(builder, clueNumber):
    builder.PrependInt32Slot(1, clueNumber, 0)

def clz_Torappu_MeetingClueData_ClueTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MeetingClueData_ReceiveTimeBonus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MeetingClueData_ReceiveTimeBonus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MeetingClueData_ReceiveTimeBonus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MeetingClueData_ReceiveTimeBonus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MeetingClueData_ReceiveTimeBonus
    def ReceiveTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData_ReceiveTimeBonus
    def ReceiveBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MeetingClueData_ReceiveTimeBonusStart(builder):
    builder.StartObject(2)

def clz_Torappu_MeetingClueData_ReceiveTimeBonusAddReceiveTimes(builder, receiveTimes):
    builder.PrependInt32Slot(0, receiveTimes, 0)

def clz_Torappu_MeetingClueData_ReceiveTimeBonusAddReceiveBonus(builder, receiveBonus):
    builder.PrependInt32Slot(1, receiveBonus, 0)

def clz_Torappu_MeetingClueData_ReceiveTimeBonusEnd(builder):
    return builder.EndObject()



class clz_Torappu_MeetingClueData_MessageLeaveBoardConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MeetingClueData_MessageLeaveBoardConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MeetingClueData_MessageLeaveBoardConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def VisitorBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def VisitorBonusLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def VisitorToWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def VisitorPreWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def BonusToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def BonusLimitText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def RecordsTextBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MeetingClueData_MessageLeaveBoardConstData
    def RecordsTextTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddVisitorBonus(builder, visitorBonus):
    builder.PrependInt32Slot(0, visitorBonus, 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddVisitorBonusLimit(builder, visitorBonusLimit):
    builder.PrependInt32Slot(1, visitorBonusLimit, 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddVisitorToWeek(builder, visitorToWeek):
    builder.PrependInt32Slot(2, visitorToWeek, 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddVisitorPreWeek(builder, visitorPreWeek):
    builder.PrependInt32Slot(3, visitorPreWeek, 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddBonusToast(builder, bonusToast):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bonusToast), 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddBonusLimitText(builder, bonusLimitText):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bonusLimitText), 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddRecordsTextBonus(builder, recordsTextBonus):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(recordsTextBonus), 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataAddRecordsTextTip(builder, recordsTextTip):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(recordsTextTip), 0)

def clz_Torappu_MeetingClueData_MessageLeaveBoardConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MeetingClueData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MeetingClueData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MeetingClueData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MeetingClueData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MeetingClueData
    def Clues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MeetingClueData_ClueData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MeetingClueData
    def CluesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MeetingClueData
    def CluesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_MeetingClueData
    def ClueTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MeetingClueData_ClueTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MeetingClueData
    def ClueTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MeetingClueData
    def ClueTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MeetingClueData
    def ReceiveTimeBonus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MeetingClueData_ReceiveTimeBonus()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MeetingClueData
    def ReceiveTimeBonusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MeetingClueData
    def ReceiveTimeBonusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MeetingClueData
    def MessageLeaveBoardConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MeetingClueData_MessageLeaveBoardConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MeetingClueData
    def InventoryLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def OutputBasicBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def OutputOperatorsBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def CluePointLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def ExpiredDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def TransferBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def RecycleBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def ExpiredBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def CommunicationDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def InitiatorBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def ParticipantsBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MeetingClueData
    def CommuFoldDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_MeetingClueDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_MeetingClueDataAddClues(builder, clues):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clues), 0)

def clz_Torappu_MeetingClueDataStartCluesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MeetingClueDataAddClueTypes(builder, clueTypes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clueTypes), 0)

def clz_Torappu_MeetingClueDataStartClueTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MeetingClueDataAddReceiveTimeBonus(builder, receiveTimeBonus):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(receiveTimeBonus), 0)

def clz_Torappu_MeetingClueDataStartReceiveTimeBonusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MeetingClueDataAddMessageLeaveBoardConstData(builder, messageLeaveBoardConstData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(messageLeaveBoardConstData), 0)

def clz_Torappu_MeetingClueDataAddInventoryLimit(builder, inventoryLimit):
    builder.PrependInt32Slot(4, inventoryLimit, 0)

def clz_Torappu_MeetingClueDataAddOutputBasicBonus(builder, outputBasicBonus):
    builder.PrependInt32Slot(5, outputBasicBonus, 0)

def clz_Torappu_MeetingClueDataAddOutputOperatorsBonus(builder, outputOperatorsBonus):
    builder.PrependInt32Slot(6, outputOperatorsBonus, 0)

def clz_Torappu_MeetingClueDataAddCluePointLimit(builder, cluePointLimit):
    builder.PrependInt32Slot(7, cluePointLimit, 0)

def clz_Torappu_MeetingClueDataAddExpiredDays(builder, expiredDays):
    builder.PrependInt32Slot(8, expiredDays, 0)

def clz_Torappu_MeetingClueDataAddTransferBonus(builder, transferBonus):
    builder.PrependInt32Slot(9, transferBonus, 0)

def clz_Torappu_MeetingClueDataAddRecycleBonus(builder, recycleBonus):
    builder.PrependInt32Slot(10, recycleBonus, 0)

def clz_Torappu_MeetingClueDataAddExpiredBonus(builder, expiredBonus):
    builder.PrependInt32Slot(11, expiredBonus, 0)

def clz_Torappu_MeetingClueDataAddCommunicationDuration(builder, communicationDuration):
    builder.PrependInt32Slot(12, communicationDuration, 0)

def clz_Torappu_MeetingClueDataAddInitiatorBonus(builder, initiatorBonus):
    builder.PrependInt32Slot(13, initiatorBonus, 0)

def clz_Torappu_MeetingClueDataAddParticipantsBonus(builder, participantsBonus):
    builder.PrependInt32Slot(14, participantsBonus, 0)

def clz_Torappu_MeetingClueDataAddCommuFoldDuration(builder, commuFoldDuration):
    builder.PrependFloat32Slot(15, commuFoldDuration, 0.0)

def clz_Torappu_MeetingClueDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_MeetingClueData
