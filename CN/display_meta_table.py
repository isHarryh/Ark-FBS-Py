# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_PlayerAvatarGroupType(object):
    NONE = 0
    ASSISTANT = 1
    DEFAULT = 2
    SPECIAL = 3
    ACTIVITY = 4
    DYNAMIC = 5


class enum__Torappu_ItemRarity(object):
    TIER_1 = 0
    TIER_2 = 1
    TIER_3 = 2
    TIER_4 = 3
    TIER_5 = 4
    TIER_6 = 5
    E_NUM = 6


class enum__Torappu_NameCardV2ModuleType(object):
    NONE = 0
    BACKGROUND = 1
    ILLUST = 2
    COLLECT = 3
    AVATAR = 4
    REMOVABLE = 5
    AVATAR_SIMPLE = 6


class enum__Torappu_NameCardV2ModuleSubType(object):
    NONE = 0
    SIGN = 1
    ASSIST = 2
    MEDAL = 3
    MAINLINE = 4
    EQUIPMENT = 5


class enum__Torappu_NameCardV2SkinType(object):
    NONE = 0
    MAINLINE = 1
    ACTIVITY = 2


class enum__Torappu_MailArchiveItemType(object):
    NORMAL = 0
    BIRTHDAY = 1
    OPEN_SERVER = 2


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EMOTICON_SET = 82
    EXCLUSIVE_TKT_GACHA = 83
    EXCLUSIVE_TKT_GACHA_10 = 84
    SO_CHAR_EXP = 85


class enum__Torappu_EmojiSceneType(object):
    NONE = 0
    ACTMULTIV3_ROOM = 1
    ACTMULTIV3_PICK = 2
    ACTMULTIV3_BATTLE = 3
    ENEMYDUEL_BATTLE = 4


class enum__Torappu_UIGuideTarget(object):
    NONE = 0
    BUILDING_CONTROL = 1
    BUILDING_DORM = 2
    BUILDING_HIRE = 3
    BUILDING_MANUFACT = 4
    BUILDING_MEETING = 5
    BUILDING_TRADING = 6
    CHAR_INFO = 7
    FRIEND = 8
    RECRUIT = 9
    SHOP = 10
    SQUAD_NORMAL = 11
    SQUAD_BATTLE = 12
    STAGE_MAINLINE = 13
    BUILDING_POWER = 14
    MISSION = 15
    CHAR_SKILL_SELECT = 16
    BUILDING_WORKSHOP = 17
    STAGE_CAMPAIGN = 18
    CHAR_EVOLVE = 19
    HANDBOOK = 20
    BUILDING_FURN_SHOP = 21
    BUILDING_TRAINING = 22
    STAGE_ACTIVITY = 23
    CRISIS_STAGE = 24
    ROGUELIKE_CHARSELECT = 25
    ROGUELIKE_BP = 26
    CLIMB_TOWER_ENTRY = 27
    CLIMB_TOWER_LAYER = 28
    ROGUELIKE_DUNGEON = 31
    RL03_TOTEM = 32
    GROCERY = 33
    TUNING = 34
    CRISIS_V2 = 35
    MISSION_ARCHIVE = 36
    FIFTH_ANNIV_EXPLORE = 37
    CARVING = 38
    VEC_BREAK = 39
    FIREWORK = 40
    BUILDING_STATION_MANAGE = 41
    ACT_MULTI_V3 = 42
    ENEMY_DUEL = 43
    VEC_BREAK_V2 = 44
    GUN_TASK = 45
    SPECIAL_OPERATOR = 46


class clz_Torappu_PlayerAvatarPerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_PlayerAvatarPerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_PlayerAvatarPerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_PlayerAvatarPerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_PlayerAvatarPerData
    def AvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def AvatarType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_PlayerAvatarPerData
    def AvatarIdSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_PlayerAvatarPerData
    def AvatarIdDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def AvatarItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def AvatarItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def AvatarItemUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarPerData
    def DynAvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_PlayerAvatarPerDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_PlayerAvatarPerDataAddAvatarId(builder, avatarId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(avatarId), 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarType(builder, avatarType):
    builder.PrependInt32Slot(1, avatarType, 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarIdSort(builder, avatarIdSort):
    builder.PrependInt32Slot(2, avatarIdSort, 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarIdDesc(builder, avatarIdDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(avatarIdDesc), 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarItemName(builder, avatarItemName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(avatarItemName), 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarItemDesc(builder, avatarItemDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(avatarItemDesc), 0)

def clz_Torappu_PlayerAvatarPerDataAddAvatarItemUsage(builder, avatarItemUsage):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(avatarItemUsage), 0)

def clz_Torappu_PlayerAvatarPerDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_PlayerAvatarPerDataAddDynAvatarId(builder, dynAvatarId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(dynAvatarId), 0)

def clz_Torappu_PlayerAvatarPerDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_PlayerAvatarGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_PlayerAvatarGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_PlayerAvatarGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_PlayerAvatarGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_PlayerAvatarGroupData
    def AvatarType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_PlayerAvatarGroupData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_PlayerAvatarGroupData
    def AvatarIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_PlayerAvatarGroupData
    def AvatarIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_PlayerAvatarGroupData
    def AvatarIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_PlayerAvatarGroupDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_PlayerAvatarGroupDataAddAvatarType(builder, avatarType):
    builder.PrependInt32Slot(0, avatarType, 0)

def clz_Torappu_PlayerAvatarGroupDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_PlayerAvatarGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_PlayerAvatarGroupDataAddAvatarIdList(builder, avatarIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(avatarIdList), 0)

def clz_Torappu_PlayerAvatarGroupDataStartAvatarIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_PlayerAvatarGroupDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_PlayerAvatarGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_PlayerAvatarData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_PlayerAvatarData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_PlayerAvatarData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_PlayerAvatarData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_PlayerAvatarData
    def DefaultAvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_PlayerAvatarData
    def AvatarList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_PlayerAvatarPerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_PlayerAvatarData
    def AvatarListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_PlayerAvatarData
    def AvatarListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_PlayerAvatarData
    def AvatarTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_PlayerAvatarGroupType__clz_Torappu_PlayerAvatarGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_PlayerAvatarData
    def AvatarTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_PlayerAvatarData
    def AvatarTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_PlayerAvatarDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_PlayerAvatarDataAddDefaultAvatarId(builder, defaultAvatarId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultAvatarId), 0)

def clz_Torappu_PlayerAvatarDataAddAvatarList(builder, avatarList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(avatarList), 0)

def clz_Torappu_PlayerAvatarDataStartAvatarListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_PlayerAvatarDataAddAvatarTypeData(builder, avatarTypeData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(avatarTypeData), 0)

def clz_Torappu_PlayerAvatarDataStartAvatarTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_PlayerAvatarDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeBackgroundSingleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeBackgroundSingleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeBackgroundSingleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeBackgroundSingleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeBackgroundSingleData
    def BgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def BgSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeBackgroundSingleData
    def BgStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeBackgroundSingleData
    def BgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def BgMusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def BgDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def BgUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundSingleData
    def UnlockDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_HomeBackgroundSingleData
    def UnlockDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundSingleData
    def UnlockDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_HomeBackgroundSingleDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_HomeBackgroundSingleDataAddBgId(builder, bgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bgId), 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgSortId(builder, bgSortId):
    builder.PrependInt32Slot(1, bgSortId, 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgStartTime(builder, bgStartTime):
    builder.PrependInt64Slot(2, bgStartTime, 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgName(builder, bgName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bgName), 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgMusicId(builder, bgMusicId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bgMusicId), 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgDes(builder, bgDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bgDes), 0)

def clz_Torappu_HomeBackgroundSingleDataAddBgUsage(builder, bgUsage):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bgUsage), 0)

def clz_Torappu_HomeBackgroundSingleDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_HomeBackgroundSingleDataAddUnlockDesList(builder, unlockDesList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesList), 0)

def clz_Torappu_HomeBackgroundSingleDataStartUnlockDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundSingleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeThemeDisplayData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeThemeDisplayData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeThemeDisplayData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeThemeDisplayData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeThemeDisplayData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeThemeDisplayData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeThemeDisplayData
    def TmName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def TmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def TmUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeDisplayData
    def UnlockDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_HomeThemeDisplayData
    def UnlockDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeThemeDisplayData
    def UnlockDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_HomeThemeDisplayData
    def IsLimitObtain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_HomeThemeDisplayData
    def HideWhenLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_HomeThemeDisplayData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_HomeThemeDisplayDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_HomeThemeDisplayDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_HomeThemeDisplayDataAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def clz_Torappu_HomeThemeDisplayDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_HomeThemeDisplayDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(3, startTime, 0)

def clz_Torappu_HomeThemeDisplayDataAddTmName(builder, tmName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tmName), 0)

def clz_Torappu_HomeThemeDisplayDataAddTmDes(builder, tmDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tmDes), 0)

def clz_Torappu_HomeThemeDisplayDataAddTmUsage(builder, tmUsage):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tmUsage), 0)

def clz_Torappu_HomeThemeDisplayDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_HomeThemeDisplayDataAddUnlockDesList(builder, unlockDesList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesList), 0)

def clz_Torappu_HomeThemeDisplayDataStartUnlockDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeThemeDisplayDataAddIsLimitObtain(builder, isLimitObtain):
    builder.PrependBoolSlot(9, isLimitObtain, 0)

def clz_Torappu_HomeThemeDisplayDataAddHideWhenLimit(builder, hideWhenLimit):
    builder.PrependBoolSlot(10, hideWhenLimit, 0)

def clz_Torappu_HomeThemeDisplayDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(11, rarity, 0)

def clz_Torappu_HomeThemeDisplayDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeBackgroundLimitInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeBackgroundLimitInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeBackgroundLimitInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeBackgroundLimitInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeBackgroundLimitInfoData
    def LimitInfoId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundLimitInfoData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeBackgroundLimitInfoData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeBackgroundLimitInfoData
    def InvalidObtainDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundLimitInfoData
    def DisplayAfterEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_HomeBackgroundLimitInfoDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_HomeBackgroundLimitInfoDataAddLimitInfoId(builder, limitInfoId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(limitInfoId), 0)

def clz_Torappu_HomeBackgroundLimitInfoDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_HomeBackgroundLimitInfoDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_HomeBackgroundLimitInfoDataAddInvalidObtainDesc(builder, invalidObtainDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(invalidObtainDesc), 0)

def clz_Torappu_HomeBackgroundLimitInfoDataAddDisplayAfterEndTime(builder, displayAfterEndTime):
    builder.PrependBoolSlot(4, displayAfterEndTime, 0)

def clz_Torappu_HomeBackgroundLimitInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeBackgroundLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeBackgroundLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeBackgroundLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeBackgroundLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeBackgroundLimitData
    def BgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundLimitData
    def LimitInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_HomeBackgroundLimitInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeBackgroundLimitData
    def LimitInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundLimitData
    def LimitInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_HomeBackgroundLimitDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_HomeBackgroundLimitDataAddBgId(builder, bgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bgId), 0)

def clz_Torappu_HomeBackgroundLimitDataAddLimitInfos(builder, limitInfos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limitInfos), 0)

def clz_Torappu_HomeBackgroundLimitDataStartLimitInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundLimitDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_HomeBackgroundLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_HomeBackgroundLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_HomeBackgroundLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_HomeBackgroundLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_HomeBackgroundLimitData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_HomeBackgroundLimitData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_HomeBackgroundLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_HomeBackgroundLimitDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_HomeBackgroundLimitDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_HomeBackgroundLimitDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_HomeBackgroundLimitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeThemeLimitInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeThemeLimitInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeThemeLimitInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeThemeLimitInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeThemeLimitInfoData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeThemeLimitInfoData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_HomeThemeLimitInfoData
    def InvalidObtainDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_HomeThemeLimitInfoDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_HomeThemeLimitInfoDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(0, startTime, 0)

def clz_Torappu_HomeThemeLimitInfoDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(1, endTime, 0)

def clz_Torappu_HomeThemeLimitInfoDataAddInvalidObtainDesc(builder, invalidObtainDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(invalidObtainDesc), 0)

def clz_Torappu_HomeThemeLimitInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeThemeLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeThemeLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeThemeLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeThemeLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeThemeLimitData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeThemeLimitData
    def LimitInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_HomeThemeLimitInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeThemeLimitData
    def LimitInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeThemeLimitData
    def LimitInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_HomeThemeLimitDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_HomeThemeLimitDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_HomeThemeLimitDataAddLimitInfos(builder, limitInfos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limitInfos), 0)

def clz_Torappu_HomeThemeLimitDataStartLimitInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeThemeLimitDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_HomeThemeLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_HomeThemeLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_HomeThemeLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_HomeThemeLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_HomeThemeLimitData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_HomeThemeLimitData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_HomeThemeLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_HomeThemeLimitDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_HomeThemeLimitDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_HomeThemeLimitDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_HomeThemeLimitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_HomeBackgroundData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_HomeBackgroundData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_HomeBackgroundData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_HomeBackgroundData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_HomeBackgroundData
    def DefaultBackgroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundData
    def DefaultThemeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundData
    def HomeBgDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_HomeBackgroundSingleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeBackgroundData
    def HomeBgDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundData
    def HomeBgDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_HomeBackgroundData
    def ThemeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_HomeThemeDisplayData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeBackgroundData
    def ThemeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundData
    def ThemeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_HomeBackgroundData
    def BackgroundLimitData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_HomeBackgroundLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeBackgroundData
    def BackgroundLimitDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundData
    def BackgroundLimitDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_HomeBackgroundData
    def ThemeLimitData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_HomeThemeLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_HomeBackgroundData
    def ThemeLimitDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_HomeBackgroundData
    def ThemeLimitDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_HomeBackgroundData
    def DefaultBgMusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_HomeBackgroundData
    def ThemeStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_HomeBackgroundDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_HomeBackgroundDataAddDefaultBackgroundId(builder, defaultBackgroundId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultBackgroundId), 0)

def clz_Torappu_HomeBackgroundDataAddDefaultThemeId(builder, defaultThemeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(defaultThemeId), 0)

def clz_Torappu_HomeBackgroundDataAddHomeBgDataList(builder, homeBgDataList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(homeBgDataList), 0)

def clz_Torappu_HomeBackgroundDataStartHomeBgDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundDataAddThemeList(builder, themeList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(themeList), 0)

def clz_Torappu_HomeBackgroundDataStartThemeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundDataAddBackgroundLimitData(builder, backgroundLimitData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundLimitData), 0)

def clz_Torappu_HomeBackgroundDataStartBackgroundLimitDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundDataAddThemeLimitData(builder, themeLimitData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(themeLimitData), 0)

def clz_Torappu_HomeBackgroundDataStartThemeLimitDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_HomeBackgroundDataAddDefaultBgMusicId(builder, defaultBgMusicId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(defaultBgMusicId), 0)

def clz_Torappu_HomeBackgroundDataAddThemeStartTime(builder, themeStartTime):
    builder.PrependInt64Slot(7, themeStartTime, 0)

def clz_Torappu_HomeBackgroundDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2ModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2ModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2ModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2ModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2ModuleData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2ModuleData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_NameCardV2ModuleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_NameCardV2ModuleDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_NameCardV2ModuleDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_NameCardV2ModuleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_NameCardV2ModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_NameCardV2ModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_NameCardV2ModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_NameCardV2ModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_NameCardV2ModuleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_NameCardV2ModuleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_NameCardV2ModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_NameCardV2ModuleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_NameCardV2ModuleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_NameCardV2ModuleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_NameCardV2ModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2RemovableModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2RemovableModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2RemovableModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2RemovableModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2RemovableModuleData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2RemovableModuleData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2RemovableModuleData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2RemovableModuleData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2RemovableModuleData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_NameCardV2RemovableModuleDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_NameCardV2RemovableModuleDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_NameCardV2RemovableModuleDataAddSubType(builder, subType):
    builder.PrependInt32Slot(1, subType, 0)

def clz_Torappu_NameCardV2RemovableModuleDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_NameCardV2RemovableModuleDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_NameCardV2RemovableModuleDataAddType(builder, type):
    builder.PrependInt32Slot(4, type, 0)

def clz_Torappu_NameCardV2RemovableModuleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_NameCardV2RemovableModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_NameCardV2RemovableModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_NameCardV2RemovableModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_NameCardV2RemovableModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_NameCardV2RemovableModuleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_NameCardV2RemovableModuleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_NameCardV2RemovableModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_NameCardV2RemovableModuleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_NameCardV2RemovableModuleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_NameCardV2RemovableModuleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_NameCardV2RemovableModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2TimeLimitInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2TimeLimitInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2TimeLimitInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2TimeLimitInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2TimeLimitInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2TimeLimitInfo
    def AvailStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2TimeLimitInfo
    def AvailEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_NameCardV2TimeLimitInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_NameCardV2TimeLimitInfoAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_NameCardV2TimeLimitInfoAddAvailStartTime(builder, availStartTime):
    builder.PrependInt64Slot(1, availStartTime, 0)

def clz_Torappu_NameCardV2TimeLimitInfoAddAvailEndTime(builder, availEndTime):
    builder.PrependInt64Slot(2, availEndTime, 0)

def clz_Torappu_NameCardV2TimeLimitInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2SkinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2SkinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2SkinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2SkinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2SkinData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def IsSpTheme(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_NameCardV2SkinData
    def DefaultShowDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_NameCardV2SkinData
    def ThemeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def ThemeEnName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def SkinStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def SkinDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def UsageDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def SkinApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2SkinData
    def UnlockConditionCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def UnlockDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_NameCardV2SkinData
    def UnlockDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def UnlockDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_NameCardV2SkinData
    def FixedModuleList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_NameCardV2SkinData
    def FixedModuleListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def FixedModuleListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_NameCardV2SkinData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def SkinTmplCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def CanChangeTmpl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_NameCardV2SkinData
    def IsTimeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_NameCardV2SkinData
    def TimeLimitInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NameCardV2TimeLimitInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_NameCardV2SkinData
    def TimeLimitInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2SkinData
    def TimeLimitInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

def clz_Torappu_NameCardV2SkinDataStart(builder):
    builder.StartObject(20)

def clz_Torappu_NameCardV2SkinDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_NameCardV2SkinDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_NameCardV2SkinDataAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_NameCardV2SkinDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_NameCardV2SkinDataAddIsSpTheme(builder, isSpTheme):
    builder.PrependBoolSlot(4, isSpTheme, 0)

def clz_Torappu_NameCardV2SkinDataAddDefaultShowDetail(builder, defaultShowDetail):
    builder.PrependBoolSlot(5, defaultShowDetail, 0)

def clz_Torappu_NameCardV2SkinDataAddThemeName(builder, themeName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(themeName), 0)

def clz_Torappu_NameCardV2SkinDataAddThemeEnName(builder, themeEnName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(themeEnName), 0)

def clz_Torappu_NameCardV2SkinDataAddSkinStartTime(builder, skinStartTime):
    builder.PrependInt64Slot(8, skinStartTime, 0)

def clz_Torappu_NameCardV2SkinDataAddSkinDesc(builder, skinDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(skinDesc), 0)

def clz_Torappu_NameCardV2SkinDataAddUsageDesc(builder, usageDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(usageDesc), 0)

def clz_Torappu_NameCardV2SkinDataAddSkinApproach(builder, skinApproach):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(skinApproach), 0)

def clz_Torappu_NameCardV2SkinDataAddUnlockConditionCnt(builder, unlockConditionCnt):
    builder.PrependInt32Slot(12, unlockConditionCnt, 0)

def clz_Torappu_NameCardV2SkinDataAddUnlockDescList(builder, unlockDescList):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDescList), 0)

def clz_Torappu_NameCardV2SkinDataStartUnlockDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2SkinDataAddFixedModuleList(builder, fixedModuleList):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(fixedModuleList), 0)

def clz_Torappu_NameCardV2SkinDataStartFixedModuleListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2SkinDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(15, rarity, 0)

def clz_Torappu_NameCardV2SkinDataAddSkinTmplCnt(builder, skinTmplCnt):
    builder.PrependInt32Slot(16, skinTmplCnt, 0)

def clz_Torappu_NameCardV2SkinDataAddCanChangeTmpl(builder, canChangeTmpl):
    builder.PrependBoolSlot(17, canChangeTmpl, 0)

def clz_Torappu_NameCardV2SkinDataAddIsTimeLimit(builder, isTimeLimit):
    builder.PrependBoolSlot(18, isTimeLimit, 0)

def clz_Torappu_NameCardV2SkinDataAddTimeLimitInfoList(builder, timeLimitInfoList):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(timeLimitInfoList), 0)

def clz_Torappu_NameCardV2SkinDataStartTimeLimitInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2SkinDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_NameCardV2SkinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_NameCardV2SkinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_NameCardV2SkinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_NameCardV2SkinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_NameCardV2SkinData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_NameCardV2SkinData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_NameCardV2SkinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_NameCardV2SkinDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_NameCardV2SkinDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_NameCardV2SkinDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_NameCardV2SkinDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2Consts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2Consts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2Consts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2Consts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2Consts
    def DefaultNameCardSkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NameCardV2Consts
    def CanUidHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_NameCardV2Consts
    def RemovableModuleMaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_NameCardV2ConstsStart(builder):
    builder.StartObject(3)

def clz_Torappu_NameCardV2ConstsAddDefaultNameCardSkinId(builder, defaultNameCardSkinId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defaultNameCardSkinId), 0)

def clz_Torappu_NameCardV2ConstsAddCanUidHide(builder, canUidHide):
    builder.PrependBoolSlot(1, canUidHide, 0)

def clz_Torappu_NameCardV2ConstsAddRemovableModuleMaxCount(builder, removableModuleMaxCount):
    builder.PrependInt32Slot(2, removableModuleMaxCount, 0)

def clz_Torappu_NameCardV2ConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_NameCardV2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NameCardV2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NameCardV2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NameCardV2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NameCardV2Data
    def FixedModuleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_NameCardV2ModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_NameCardV2Data
    def FixedModuleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2Data
    def FixedModuleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_NameCardV2Data
    def RemovableModuleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_NameCardV2RemovableModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_NameCardV2Data
    def RemovableModuleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2Data
    def RemovableModuleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_NameCardV2Data
    def SkinData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_NameCardV2SkinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_NameCardV2Data
    def SkinDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NameCardV2Data
    def SkinDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_NameCardV2Data
    def Consts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_NameCardV2Consts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_NameCardV2DataStart(builder):
    builder.StartObject(4)

def clz_Torappu_NameCardV2DataAddFixedModuleData(builder, fixedModuleData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fixedModuleData), 0)

def clz_Torappu_NameCardV2DataStartFixedModuleDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2DataAddRemovableModuleData(builder, removableModuleData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(removableModuleData), 0)

def clz_Torappu_NameCardV2DataStartRemovableModuleDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2DataAddSkinData(builder, skinData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(skinData), 0)

def clz_Torappu_NameCardV2DataStartSkinDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NameCardV2DataAddConsts(builder, consts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(consts), 0)

def clz_Torappu_NameCardV2DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_MailArchiveItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MailArchiveItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MailArchiveItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MailArchiveItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MailArchiveItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailArchiveItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MailArchiveItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MailArchiveItemData
    def DisplayReceiveTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MailArchiveItemData
    def Year(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MailArchiveItemData
    def DateDelta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MailArchiveItemData
    def SenderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailArchiveItemData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailArchiveItemData
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailArchiveItemData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MailArchiveItemData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MailArchiveItemData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_MailArchiveItemDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_MailArchiveItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MailArchiveItemDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_MailArchiveItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_MailArchiveItemDataAddDisplayReceiveTs(builder, displayReceiveTs):
    builder.PrependInt64Slot(3, displayReceiveTs, 0)

def clz_Torappu_MailArchiveItemDataAddYear(builder, year):
    builder.PrependInt32Slot(4, year, 0)

def clz_Torappu_MailArchiveItemDataAddDateDelta(builder, dateDelta):
    builder.PrependInt32Slot(5, dateDelta, 0)

def clz_Torappu_MailArchiveItemDataAddSenderId(builder, senderId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(senderId), 0)

def clz_Torappu_MailArchiveItemDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MailArchiveItemDataAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_MailArchiveItemDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_MailArchiveItemDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MailArchiveItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MailArchiveItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MailArchiveItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MailArchiveItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MailArchiveItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MailArchiveItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MailArchiveItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MailArchiveItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MailArchiveItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MailArchiveItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MailArchiveItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MailArchiveItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MailArchiveConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MailArchiveConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MailArchiveConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MailArchiveConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MailArchiveConstData
    def FuncOpenTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MailArchiveConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_MailArchiveConstDataAddFuncOpenTs(builder, funcOpenTs):
    builder.PrependInt64Slot(0, funcOpenTs, 0)

def clz_Torappu_MailArchiveConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MailArchiveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MailArchiveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MailArchiveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MailArchiveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MailArchiveData
    def MailArchiveInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MailArchiveItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MailArchiveData
    def MailArchiveInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MailArchiveData
    def MailArchiveInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_MailArchiveData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MailArchiveConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_MailArchiveDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_MailArchiveDataAddMailArchiveInfoDict(builder, mailArchiveInfoDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mailArchiveInfoDict), 0)

def clz_Torappu_MailArchiveDataStartMailArchiveInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MailArchiveDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_MailArchiveDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MailSenderSingleInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MailSenderSingleInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MailSenderSingleInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MailSenderSingleInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MailSenderSingleInfo
    def SenderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailSenderSingleInfo
    def SenderName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MailSenderSingleInfo
    def AvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_MailSenderSingleInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_MailSenderSingleInfoAddSenderId(builder, senderId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(senderId), 0)

def clz_Torappu_MailSenderSingleInfoAddSenderName(builder, senderName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(senderName), 0)

def clz_Torappu_MailSenderSingleInfoAddAvatarId(builder, avatarId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(avatarId), 0)

def clz_Torappu_MailSenderSingleInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MailSenderSingleInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MailSenderSingleInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MailSenderSingleInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MailSenderSingleInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MailSenderSingleInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MailSenderSingleInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MailSenderSingleInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MailSenderSingleInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MailSenderSingleInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MailSenderSingleInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MailSenderSingleInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_MailSenderData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MailSenderData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MailSenderData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MailSenderData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MailSenderData
    def SenderDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MailSenderSingleInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MailSenderData
    def SenderDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MailSenderData
    def SenderDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_MailSenderDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_MailSenderDataAddSenderDict(builder, senderDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(senderDict), 0)

def clz_Torappu_MailSenderDataStartSenderDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MailSenderDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_EmoticonData_EmojiData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EmoticonData_EmojiData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EmoticonData_EmojiData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EmoticonData_EmojiData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EmoticonData_EmojiData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_EmoticonData_EmojiData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_EmoticonData_EmojiData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_EmoticonData_EmojiData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_EmoticonData_EmojiData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_EmoticonData_EmojiDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_EmoticonData_EmojiDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_EmoticonData_EmojiDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_EmoticonData_EmojiDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_EmoticonData_EmojiDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_EmoticonData_EmojiDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_EmoticonData_EmojiDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_EmoticonData_EmojiData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_EmoticonData_EmojiData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_EmoticonData_EmojiData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_EmoticonData_EmojiData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_EmoticonData_EmojiData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_EmoticonData_EmojiData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EmoticonData_EmojiData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_EmoticonData_EmojiDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_EmoticonData_EmojiDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_EmoticonData_EmojiDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_EmoticonData_EmojiDataEnd(builder):
    return builder.EndObject()



class dict__string__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__string__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_stringStart(builder):
    builder.StartObject(2)

def dict__string__list_stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_EmoticonData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EmoticonData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EmoticonData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EmoticonData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EmoticonData
    def EmojiDataDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_EmoticonData_EmojiData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EmoticonData
    def EmojiDataDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EmoticonData
    def EmojiDataDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_EmoticonData
    def EmoticonThemeDataDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EmoticonData
    def EmoticonThemeDataDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EmoticonData
    def EmoticonThemeDataDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_EmoticonDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_EmoticonDataAddEmojiDataDict(builder, emojiDataDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(emojiDataDict), 0)

def clz_Torappu_EmoticonDataStartEmojiDataDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EmoticonDataAddEmoticonThemeDataDict(builder, emoticonThemeDataDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(emoticonThemeDataDict), 0)

def clz_Torappu_EmoticonDataStartEmoticonThemeDataDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EmoticonDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_StoryVariantData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StoryVariantData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StoryVariantData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StoryVariantData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StoryVariantData
    def PlotTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StoryVariantData
    def SpStoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StoryVariantData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StoryVariantData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StoryVariantData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StoryVariantData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StoryVariantData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StoryVariantData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_StoryVariantData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StoryVariantData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_StoryVariantDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_StoryVariantDataAddPlotTaskId(builder, plotTaskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(plotTaskId), 0)

def clz_Torappu_StoryVariantDataAddSpStoryId(builder, spStoryId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(spStoryId), 0)

def clz_Torappu_StoryVariantDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_StoryVariantDataAddPriority(builder, priority):
    builder.PrependInt32Slot(3, priority, 0)

def clz_Torappu_StoryVariantDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(4, startTime, 0)

def clz_Torappu_StoryVariantDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(5, endTime, 0)

def clz_Torappu_StoryVariantDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_StoryVariantDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_StoryVariantDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StoryVariantDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_StoryVariantData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_StoryVariantData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_StoryVariantData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_StoryVariantData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_StoryVariantData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_StoryVariantData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StoryVariantData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_StoryVariantDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_StoryVariantDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_StoryVariantDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_StoryVariantDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_GuidebookConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GuidebookConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GuidebookConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GuidebookConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GuidebookConfigData
    def ConfigId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GuidebookConfigData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GuidebookConfigData
    def PageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GuidebookConfigData
    def PageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GuidebookConfigData
    def PageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_GuidebookConfigDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_GuidebookConfigDataAddConfigId(builder, configId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configId), 0)

def clz_Torappu_GuidebookConfigDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_GuidebookConfigDataAddPageIdList(builder, pageIdList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pageIdList), 0)

def clz_Torappu_GuidebookConfigDataStartPageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GuidebookConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_GuidebookGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GuidebookGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GuidebookGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GuidebookGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GuidebookGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GuidebookGroupData
    def GuideTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GuidebookGroupData
    def SubSignal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GuidebookGroupData
    def ConfigList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GuidebookConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GuidebookGroupData
    def ConfigListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GuidebookGroupData
    def ConfigListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_GuidebookGroupDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_GuidebookGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_GuidebookGroupDataAddGuideTarget(builder, guideTarget):
    builder.PrependInt32Slot(1, guideTarget, 0)

def clz_Torappu_GuidebookGroupDataAddSubSignal(builder, subSignal):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subSignal), 0)

def clz_Torappu_GuidebookGroupDataAddConfigList(builder, configList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(configList), 0)

def clz_Torappu_GuidebookGroupDataStartConfigListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GuidebookGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_GuidebookGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_GuidebookGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_GuidebookGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_GuidebookGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_GuidebookGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_GuidebookGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GuidebookGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_GuidebookGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_GuidebookGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_GuidebookGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_GuidebookGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DisplayMetaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DisplayMetaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DisplayMetaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DisplayMetaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DisplayMetaData
    def PlayerAvatarData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_PlayerAvatarData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def HomeBackgroundData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_HomeBackgroundData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def NameCardV2Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_NameCardV2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def MailArchiveData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MailArchiveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def MailSenderData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MailSenderData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def EmoticonData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EmoticonData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def StoryVariantData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_StoryVariantData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def StoryVariantDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DisplayMetaData
    def StoryVariantDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_DisplayMetaData
    def GuidebookGroupDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_GuidebookGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DisplayMetaData
    def GuidebookGroupDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DisplayMetaData
    def GuidebookGroupDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_DisplayMetaDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_DisplayMetaDataAddPlayerAvatarData(builder, playerAvatarData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(playerAvatarData), 0)

def clz_Torappu_DisplayMetaDataAddHomeBackgroundData(builder, homeBackgroundData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(homeBackgroundData), 0)

def clz_Torappu_DisplayMetaDataAddNameCardV2Data(builder, nameCardV2Data):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nameCardV2Data), 0)

def clz_Torappu_DisplayMetaDataAddMailArchiveData(builder, mailArchiveData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mailArchiveData), 0)

def clz_Torappu_DisplayMetaDataAddMailSenderData(builder, mailSenderData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mailSenderData), 0)

def clz_Torappu_DisplayMetaDataAddEmoticonData(builder, emoticonData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(emoticonData), 0)

def clz_Torappu_DisplayMetaDataAddStoryVariantData(builder, storyVariantData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(storyVariantData), 0)

def clz_Torappu_DisplayMetaDataStartStoryVariantDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DisplayMetaDataAddGuidebookGroupDatas(builder, guidebookGroupDatas):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(guidebookGroupDatas), 0)

def clz_Torappu_DisplayMetaDataStartGuidebookGroupDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DisplayMetaDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_DisplayMetaData
