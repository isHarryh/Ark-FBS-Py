# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_SpecialOperatorTargetType(object):
    NONE = 0
    ROGUE = 1


class enum__Torappu_SpecialOperatorDetailNodeType(object):
    NONE = 0
    EVOLVE = 1
    SKILL = 2
    TALENT = 3
    MASTER = 4
    UNIEQUIP = 5


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_SpecialOperatorConditionViewType(object):
    TASK = 0
    EVOLVEPHASE = 1


class enum__Torappu_MissionType(object):
    UNKNOWN = 0
    MAIN = 1
    DAILY = 2
    WEEKLY = 3
    GUIDE = 4
    SUB = 5
    ACTIVITY = 6
    OPENSERVER = 7
    TOWERSEASON = 8
    RETRO = 9
    SPECIAL_OPERATOR = 10
    SPECIAL_OPERATOR_WEEKLY = 11


class enum__Torappu_MissionItemBgType(object):
    COMMON = 0
    Equipment = 1
    Char = 2


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EMOTICON_SET = 82
    EXCLUSIVE_TKT_GACHA = 83
    EXCLUSIVE_TKT_GACHA_10 = 84
    SO_CHAR_EXP = 85


class clz_Torappu_SpecialOperatorBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorBasicData
    def SoCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorBasicData
    def TargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorBasicData
    def TargetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def TargetTopicName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def BgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def BgEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def CharEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorBasicData
    def TypeIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SpecialOperatorBasicDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SpecialOperatorBasicDataAddSoCharId(builder, soCharId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(soCharId), 0)

def clz_Torappu_SpecialOperatorBasicDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SpecialOperatorBasicDataAddTargetType(builder, targetType):
    builder.PrependInt32Slot(2, targetType, 0)

def clz_Torappu_SpecialOperatorBasicDataAddTargetId(builder, targetId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetId), 0)

def clz_Torappu_SpecialOperatorBasicDataAddTargetTopicName(builder, targetTopicName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetTopicName), 0)

def clz_Torappu_SpecialOperatorBasicDataAddBgId(builder, bgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bgId), 0)

def clz_Torappu_SpecialOperatorBasicDataAddBgEffectId(builder, bgEffectId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bgEffectId), 0)

def clz_Torappu_SpecialOperatorBasicDataAddCharEffectId(builder, charEffectId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(charEffectId), 0)

def clz_Torappu_SpecialOperatorBasicDataAddTypeIconId(builder, typeIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(typeIconId), 0)

def clz_Torappu_SpecialOperatorBasicDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorBasicData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorBasicData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorBasicDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorBasicDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorBasicDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorBasicDataEnd(builder):
    return builder.EndObject()



class list_int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_int
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # list_int
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # list_int
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_int
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_intStart(builder):
    builder.StartObject(1)

def list_intAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_intStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_intEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailConstData
    def NextRoundBuffToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SpecialOperatorDetailConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SpecialOperatorDetailConstDataAddNextRoundBuffToast(builder, nextRoundBuffToast):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nextRoundBuffToast), 0)

def clz_Torappu_SpecialOperatorDetailConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailTabData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailTabData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailTabData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailTabData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailTabData
    def SoTabId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailTabData
    def SoTabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailTabData
    def SoTabSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailTabData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailTabDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SpecialOperatorDetailTabDataAddSoTabId(builder, soTabId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(soTabId), 0)

def clz_Torappu_SpecialOperatorDetailTabDataAddSoTabName(builder, soTabName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(soTabName), 0)

def clz_Torappu_SpecialOperatorDetailTabDataAddSoTabSortId(builder, soTabSortId):
    builder.PrependInt32Slot(2, soTabSortId, 0)

def clz_Torappu_SpecialOperatorDetailTabDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(3, nodeType, 0)

def clz_Torappu_SpecialOperatorDetailTabDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailTabData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailTabData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailTabData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailTabData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailTabData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailTabData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailTabData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailTabDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailTabDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailTabDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailTabDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailNodeUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailNodeUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailNodeUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def IsInGameMechanics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def UnlockEvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def UnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def UnlockTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def FrontNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def IfAutoUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def ConditionViewType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def TopoOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddIsInGameMechanics(builder, isInGameMechanics):
    builder.PrependBoolSlot(2, isInGameMechanics, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddUnlockEvolvePhase(builder, unlockEvolvePhase):
    builder.PrependInt32Slot(3, unlockEvolvePhase, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddUnlockLevel(builder, unlockLevel):
    builder.PrependInt32Slot(4, unlockLevel, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddUnlockTaskId(builder, unlockTaskId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockTaskId), 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddIfAutoUnlock(builder, ifAutoUnlock):
    builder.PrependBoolSlot(7, ifAutoUnlock, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddConditionViewType(builder, conditionViewType):
    builder.PrependInt32Slot(8, conditionViewType, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddTopoOrder(builder, topoOrder):
    builder.PrependInt32Slot(9, topoOrder, 0)

def clz_Torappu_SpecialOperatorDetailNodeUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailNodeUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailEvolveNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailEvolveNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailEvolveNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def ToEvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailEvolveNodeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SpecialOperatorDetailEvolveNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailEvolveNodeDataAddToEvolvePhase(builder, toEvolvePhase):
    builder.PrependInt32Slot(1, toEvolvePhase, 0)

def clz_Torappu_SpecialOperatorDetailEvolveNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailEvolveNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailSkillNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailSkillNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailSkillNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailSkillNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailSkillNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailSkillNodeData
    def SkillKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailSkillNodeData
    def SkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailSkillNodeData
    def SkillSpLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailSkillNodeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SpecialOperatorDetailSkillNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailSkillNodeDataAddSkillKey(builder, skillKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(skillKey), 0)

def clz_Torappu_SpecialOperatorDetailSkillNodeDataAddSkillLevel(builder, skillLevel):
    builder.PrependInt32Slot(2, skillLevel, 0)

def clz_Torappu_SpecialOperatorDetailSkillNodeDataAddSkillSpLevel(builder, skillSpLevel):
    builder.PrependInt32Slot(3, skillSpLevel, 0)

def clz_Torappu_SpecialOperatorDetailSkillNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailSkillNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailTalentNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailTalentNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailTalentNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailTalentNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailTalentNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailTalentNodeData
    def TalentIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorDetailTalentNodeData
    def UpdateCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailTalentNodeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SpecialOperatorDetailTalentNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailTalentNodeDataAddTalentIndex(builder, talentIndex):
    builder.PrependInt32Slot(1, talentIndex, 0)

def clz_Torappu_SpecialOperatorDetailTalentNodeDataAddUpdateCount(builder, updateCount):
    builder.PrependInt32Slot(2, updateCount, 0)

def clz_Torappu_SpecialOperatorDetailTalentNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailTalentNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailMasterNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailMasterNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailMasterNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailMasterNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailMasterNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailMasterNodeData
    def MasterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailMasterNodeData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailMasterNodeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SpecialOperatorDetailMasterNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailMasterNodeDataAddMasterId(builder, masterId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(masterId), 0)

def clz_Torappu_SpecialOperatorDetailMasterNodeDataAddLevel(builder, level):
    builder.PrependInt32Slot(2, level, 0)

def clz_Torappu_SpecialOperatorDetailMasterNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailMasterNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailUniEquipNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailUniEquipNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailUniEquipNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def UniEquipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def EquipLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorDetailUniEquipNodeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SpecialOperatorDetailUniEquipNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorDetailUniEquipNodeDataAddUniEquipId(builder, uniEquipId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipId), 0)

def clz_Torappu_SpecialOperatorDetailUniEquipNodeDataAddEquipLevel(builder, equipLevel):
    builder.PrependInt32Slot(2, equipLevel, 0)

def clz_Torappu_SpecialOperatorDetailUniEquipNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailUniEquipNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeDataEnd(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector2
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector2
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector2Start(builder):
    builder.StartObject(2)

def clz_UnityEngine_Vector2AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector2AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector2End(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorPointPosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorPointPosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorPointPosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorPointPosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorPointPosData
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SpecialOperatorPointPosDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SpecialOperatorPointPosDataAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def clz_Torappu_SpecialOperatorPointPosDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorPointPosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorPointPosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorPointPosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorPointPosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorPointPosData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorPointPosData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorPointPosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorPointPosDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorPointPosDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorPointPosDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorPointPosDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorNodePointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorNodePointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorNodePointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorNodePointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorNodePointData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SpecialOperatorNodePointDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SpecialOperatorNodePointDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SpecialOperatorNodePointDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorNodePointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorNodePointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorNodePointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorNodePointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorNodePointData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorNodePointData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorNodePointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorNodePointDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorNodePointDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorNodePointDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorNodePointDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorElitePointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorElitePointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorElitePointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorElitePointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorElitePointData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorElitePointDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SpecialOperatorElitePointDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(0, evolvePhase, 0)

def clz_Torappu_SpecialOperatorElitePointDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorElitePointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorElitePointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorElitePointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorElitePointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorElitePointData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorElitePointData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorElitePointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorElitePointDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorElitePointDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorElitePointDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorElitePointDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorLevelPointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorLevelPointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorLevelPointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorLevelPointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorLevelPointData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorLevelPointData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SpecialOperatorLevelPointDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SpecialOperatorLevelPointDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(0, evolvePhase, 0)

def clz_Torappu_SpecialOperatorLevelPointDataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_SpecialOperatorLevelPointDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorLevelPointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorLevelPointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorLevelPointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorLevelPointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorLevelPointData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorLevelPointData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorLevelPointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorLevelPointDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorLevelPointDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorLevelPointDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorLevelPointDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorLinePosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorLinePosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorLinePosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorLinePosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorLinePosData
    def StartPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorLinePosData
    def EndPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SpecialOperatorLinePosDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SpecialOperatorLinePosDataAddStartPos(builder, startPos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startPos), 0)

def clz_Torappu_SpecialOperatorLinePosDataAddEndPos(builder, endPos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endPos), 0)

def clz_Torappu_SpecialOperatorLinePosDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorLinePosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorLinePosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorLinePosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorLinePosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorLinePosData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorLinePosData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorLinePosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorLinePosDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorLinePosDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorLinePosDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorLinePosDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorLineRelationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorLineRelationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorLineRelationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorLineRelationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorLineRelationData
    def StartPointList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SpecialOperatorLineRelationData
    def StartPointListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorLineRelationData
    def StartPointListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SpecialOperatorLineRelationData
    def EndPointList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SpecialOperatorLineRelationData
    def EndPointListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorLineRelationData
    def EndPointListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_SpecialOperatorLineRelationDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SpecialOperatorLineRelationDataAddStartPointList(builder, startPointList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startPointList), 0)

def clz_Torappu_SpecialOperatorLineRelationDataStartStartPointListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorLineRelationDataAddEndPointList(builder, endPointList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endPointList), 0)

def clz_Torappu_SpecialOperatorLineRelationDataStartEndPointListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorLineRelationDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorLineRelationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorLineRelationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorLineRelationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorLineRelationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorLineRelationData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorLineRelationData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorLineRelationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorLineRelationDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorLineRelationDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorLineRelationDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorLineRelationDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDiagramData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDiagramData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDiagramData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDiagramData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDiagramData
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SpecialOperatorDiagramData
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SpecialOperatorDiagramData
    def PointPosDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorPointPosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def PointPosDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def PointPosDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SpecialOperatorDiagramData
    def NodePointDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorNodePointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def NodePointDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def NodePointDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SpecialOperatorDiagramData
    def ElitePointDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorElitePointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def ElitePointDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def ElitePointDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LevelPointDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorLevelPointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def LevelPointDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LevelPointDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LinePosDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorLinePosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def LinePosDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LinePosDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LineRelationDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorLineRelationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDiagramData
    def LineRelationDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDiagramData
    def LineRelationDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_SpecialOperatorDiagramDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SpecialOperatorDiagramDataAddWidth(builder, width):
    builder.PrependFloat32Slot(0, width, 0.0)

def clz_Torappu_SpecialOperatorDiagramDataAddHeight(builder, height):
    builder.PrependFloat32Slot(1, height, 0.0)

def clz_Torappu_SpecialOperatorDiagramDataAddPointPosDataMap(builder, pointPosDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pointPosDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartPointPosDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataAddNodePointDataMap(builder, nodePointDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodePointDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartNodePointDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataAddElitePointDataMap(builder, elitePointDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(elitePointDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartElitePointDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataAddLevelPointDataMap(builder, levelPointDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(levelPointDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartLevelPointDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataAddLinePosDataMap(builder, linePosDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(linePosDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartLinePosDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataAddLineRelationDataMap(builder, lineRelationDataMap):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lineRelationDataMap), 0)

def clz_Torappu_SpecialOperatorDiagramDataStartLineRelationDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDiagramDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDiagramData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDiagramData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDiagramData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDiagramData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDiagramData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDiagramData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDiagramData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDiagramDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDiagramDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDiagramDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDiagramDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorDetailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorDetailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorDetailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorDetailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorDetailData
    def SpecialOperatorExpMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def SpecialOperatorExpMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def SpecialOperatorExpMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def DetailConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def TabData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailTabData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def TabDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def TabDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def NodeUnlockData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailNodeUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def NodeUnlockDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def NodeUnlockDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def EvolveNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailEvolveNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def EvolveNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def EvolveNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def SkillNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailSkillNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def SkillNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def SkillNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def TalentNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailTalentNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def TalentNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def TalentNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def MasterNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailMasterNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def MasterNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def MasterNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def UniEquipNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailUniEquipNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def UniEquipNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def UniEquipNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_SpecialOperatorDetailData
    def NodeDiagramMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDiagramData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorDetailData
    def NodeDiagramMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorDetailData
    def NodeDiagramMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_SpecialOperatorDetailDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SpecialOperatorDetailDataAddSpecialOperatorExpMap(builder, specialOperatorExpMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(specialOperatorExpMap), 0)

def clz_Torappu_SpecialOperatorDetailDataStartSpecialOperatorExpMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddDetailConstData(builder, detailConstData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detailConstData), 0)

def clz_Torappu_SpecialOperatorDetailDataAddTabData(builder, tabData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tabData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartTabDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddNodeUnlockData(builder, nodeUnlockData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUnlockData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartNodeUnlockDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddEvolveNodeData(builder, evolveNodeData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(evolveNodeData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartEvolveNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddSkillNodeData(builder, skillNodeData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(skillNodeData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartSkillNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddTalentNodeData(builder, talentNodeData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(talentNodeData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartTalentNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddMasterNodeData(builder, masterNodeData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(masterNodeData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartMasterNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddUniEquipNodeData(builder, uniEquipNodeData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipNodeData), 0)

def clz_Torappu_SpecialOperatorDetailDataStartUniEquipNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataAddNodeDiagramMap(builder, nodeDiagramMap):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(nodeDiagramMap), 0)

def clz_Torappu_SpecialOperatorDetailDataStartNodeDiagramMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorDetailDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SpecialOperatorDetailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SpecialOperatorDetailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SpecialOperatorDetailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SpecialOperatorDetailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SpecialOperatorDetailData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SpecialOperatorDetailData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorDetailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SpecialOperatorDetailDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SpecialOperatorDetailDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SpecialOperatorDetailDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorModeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorModeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorModeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorModeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorModeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialOperatorModeData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SpecialOperatorModeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SpecialOperatorModeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_SpecialOperatorModeDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_SpecialOperatorModeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionDisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionDisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionDisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionDisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionDisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionDisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionDisplayRewards
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionDisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_MissionDisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_MissionDisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDisplayRewardsAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_MissionDisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def ItemBgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def PreMissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_MissionData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_MissionData
    def MissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def ToPage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def PeriodicalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_MissionData
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def FoldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def HaveSubMissionToUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_MissionData
    def CountEndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionDataStart(builder):
    builder.StartObject(19)

def clz_Torappu_MissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_MissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_MissionDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_MissionDataAddItemBgType(builder, itemBgType):
    builder.PrependInt32Slot(4, itemBgType, 0)

def clz_Torappu_MissionDataAddPreMissionIds(builder, preMissionIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionIds), 0)

def clz_Torappu_MissionDataStartPreMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_MissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_MissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_MissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_MissionDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_MissionDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_MissionDataAddToPage(builder, toPage):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(toPage), 0)

def clz_Torappu_MissionDataAddPeriodicalPoint(builder, periodicalPoint):
    builder.PrependInt32Slot(13, periodicalPoint, 0)

def clz_Torappu_MissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddBackImagePath(builder, backImagePath):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)

def clz_Torappu_MissionDataAddFoldId(builder, foldId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(foldId), 0)

def clz_Torappu_MissionDataAddHaveSubMissionToUnlock(builder, haveSubMissionToUnlock):
    builder.PrependBoolSlot(17, haveSubMissionToUnlock, 0)

def clz_Torappu_MissionDataAddCountEndTs(builder, countEndTs):
    builder.PrependInt64Slot(18, countEndTs, 0)

def clz_Torappu_MissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionGroup
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def PreMissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Period(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_MissionGroup
    def PeriodAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MissionGroup
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionGroup
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionGroup
    def MissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionGroup
    def MissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def MissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_MissionGroup
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(9)

def clz_Torappu_MissionGroupAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionGroupAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MissionGroupAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_MissionGroupAddPreMissionGroup(builder, preMissionGroup):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionGroup), 0)

def clz_Torappu_MissionGroupAddPeriod(builder, period):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(period), 0)

def clz_Torappu_MissionGroupStartPeriodVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionGroupStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddMissionIds(builder, missionIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionIds), 0)

def clz_Torappu_MissionGroupStartMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddStartTs(builder, startTs):
    builder.PrependInt64Slot(7, startTs, 0)

def clz_Torappu_MissionGroupAddEndTs(builder, endTs):
    builder.PrependInt64Slot(8, endTs, 0)

def clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MissionGroup
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MissionGroup
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MissionGroupAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MissionGroupAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorConstData
    def WeeklyTaskBoardUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def TaskPinOnToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def NoFrontNodeToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def NoFrontTaskToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def SkillGotoToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def EvolveTabExpNotice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialOperatorConstData
    def PinnedSpecialOperator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SpecialOperatorConstDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SpecialOperatorConstDataAddWeeklyTaskBoardUnlock(builder, weeklyTaskBoardUnlock):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weeklyTaskBoardUnlock), 0)

def clz_Torappu_SpecialOperatorConstDataAddTaskPinOnToast(builder, taskPinOnToast):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskPinOnToast), 0)

def clz_Torappu_SpecialOperatorConstDataAddNoFrontNodeToast(builder, noFrontNodeToast):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(noFrontNodeToast), 0)

def clz_Torappu_SpecialOperatorConstDataAddNoFrontTaskToast(builder, noFrontTaskToast):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(noFrontTaskToast), 0)

def clz_Torappu_SpecialOperatorConstDataAddSkillGotoToast(builder, skillGotoToast):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(skillGotoToast), 0)

def clz_Torappu_SpecialOperatorConstDataAddEvolveTabExpNotice(builder, evolveTabExpNotice):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(evolveTabExpNotice), 0)

def clz_Torappu_SpecialOperatorConstDataAddPinnedSpecialOperator(builder, pinnedSpecialOperator):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pinnedSpecialOperator), 0)

def clz_Torappu_SpecialOperatorConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialOperatorTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialOperatorTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialOperatorTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialOperatorTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialOperatorTable
    def OperatorBasicData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorTable
    def OperatorBasicDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorTable
    def OperatorBasicDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SpecialOperatorTable
    def OperatorDetailData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SpecialOperatorDetailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorTable
    def OperatorDetailDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorTable
    def OperatorDetailDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SpecialOperatorTable
    def ModeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SpecialOperatorModeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorTable
    def ModeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorTable
    def ModeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialOperatorTable
    def NodeUnlockMissionGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SpecialOperatorTable
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SpecialOperatorConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SpecialOperatorTableStart(builder):
    builder.StartObject(6)

def clz_Torappu_SpecialOperatorTableAddOperatorBasicData(builder, operatorBasicData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(operatorBasicData), 0)

def clz_Torappu_SpecialOperatorTableStartOperatorBasicDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorTableAddOperatorDetailData(builder, operatorDetailData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(operatorDetailData), 0)

def clz_Torappu_SpecialOperatorTableStartOperatorDetailDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorTableAddModeData(builder, modeData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(modeData), 0)

def clz_Torappu_SpecialOperatorTableStartModeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorTableAddNodeUnlockMissionData(builder, nodeUnlockMissionData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUnlockMissionData), 0)

def clz_Torappu_SpecialOperatorTableStartNodeUnlockMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorTableAddNodeUnlockMissionGroup(builder, nodeUnlockMissionGroup):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUnlockMissionGroup), 0)

def clz_Torappu_SpecialOperatorTableStartNodeUnlockMissionGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialOperatorTableAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_SpecialOperatorTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_SpecialOperatorTable
