# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BuildingData_LODLEVEL(object):
    HIGHEST = 0
    HIGH = 1
    LOW = 2
    LOWEST = 3
    COUNT = 4


class clz_Torappu_GridPosition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GridPosition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GridPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GridPosition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GridPosition
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GridPosition
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GridPositionStart(builder):
    builder.StartObject(2)

def clz_Torappu_GridPositionAddRow(builder, row):
    builder.PrependInt32Slot(0, row, 0)

def clz_Torappu_GridPositionAddCol(builder, col):
    builder.PrependInt32Slot(1, col, 0)

def clz_Torappu_GridPositionEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ObstaclePoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ObstaclePoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ObstaclePoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ObstaclePoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ObstaclePoint
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ObstaclePoint
    def EdgeWalkableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ObstaclePointStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ObstaclePointAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def clz_Torappu_BuildingData_ObstaclePointAddEdgeWalkableMask(builder, edgeWalkableMask):
    builder.PrependUint8Slot(1, edgeWalkableMask, 0)

def clz_Torappu_BuildingData_ObstaclePointEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ObstacleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ObstacleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ObstacleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ObstacleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ObstacleData
    def FloorObstacles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ObstaclePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ObstacleData
    def FloorObstaclesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ObstacleData
    def FloorObstaclesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_ObstacleData
    def BackwallObstacles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ObstaclePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ObstacleData
    def BackwallObstaclesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ObstacleData
    def BackwallObstaclesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_ObstacleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ObstacleDataAddFloorObstacles(builder, floorObstacles):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(floorObstacles), 0)

def clz_Torappu_BuildingData_ObstacleDataStartFloorObstaclesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ObstacleDataAddBackwallObstacles(builder, backwallObstacles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(backwallObstacles), 0)

def clz_Torappu_BuildingData_ObstacleDataStartBackwallObstaclesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ObstacleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_ObstacleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_ObstacleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_ObstacleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_ObstacleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_ObstacleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_ObstacleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_ObstacleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_ObstacleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_ObstacleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_ObstacleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_ObstacleDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_BuildingData_LODLEVEL__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_BuildingData_LODLEVEL__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_BuildingData_LODLEVEL__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_BuildingData_LODLEVEL__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_BuildingData_LODLEVEL__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_BuildingData_LODLEVEL__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__enum__Torappu_BuildingData_LODLEVEL__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_BuildingData_LODLEVEL__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_BuildingData_LODLEVEL__list_stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_BuildingData_LODLEVEL__list_stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_BuildingData_LODLEVEL__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_BuildingData_LODLEVEL__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_BuildingData_LODLEVEL__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_FurnitureLODConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_FurnitureLODConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_FurnitureLODConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_FurnitureLODConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_FurnitureLODConfig
    def ShowedObjNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_BuildingData_LODLEVEL__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_FurnitureLODConfig
    def ShowedObjNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_FurnitureLODConfig
    def ShowedObjNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_FurnitureLODConfig
    def IsOverWrite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_BuildingData_FurnitureLODConfigStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_FurnitureLODConfigAddShowedObjNames(builder, showedObjNames):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(showedObjNames), 0)

def clz_Torappu_BuildingData_FurnitureLODConfigStartShowedObjNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_FurnitureLODConfigAddIsOverWrite(builder, isOverWrite):
    builder.PrependBoolSlot(1, isOverWrite, 0)

def clz_Torappu_BuildingData_FurnitureLODConfigEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_FurnitureLODConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_FurnitureLODConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_FurnitureLODConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_FurnitureLODConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_FurnitureLODConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_FurnitureLODConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_FurnitureLODConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_FurnitureLODConfigStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_FurnitureLODConfigAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_FurnitureLODConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_FurnitureLODConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_BuildingLocalData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_BuildingLocalData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_BuildingLocalData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_BuildingLocalData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureObstacleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_ObstacleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureObstacleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureObstacleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_BuildingLocalData
    def RoomObstacleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_ObstacleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_BuildingLocalData
    def RoomObstacleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_BuildingLocalData
    def RoomObstacleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureLodconfig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_FurnitureLODConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureLodconfigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_BuildingLocalData
    def FurnitureLodconfigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_BuildingData_BuildingLocalDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_BuildingLocalDataAddFurnitureObstacleData(builder, furnitureObstacleData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureObstacleData), 0)

def clz_Torappu_BuildingData_BuildingLocalDataStartFurnitureObstacleDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_BuildingLocalDataAddRoomObstacleData(builder, roomObstacleData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(roomObstacleData), 0)

def clz_Torappu_BuildingData_BuildingLocalDataStartRoomObstacleDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_BuildingLocalDataAddFurnitureLodconfig(builder, furnitureLodconfig):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureLodconfig), 0)

def clz_Torappu_BuildingData_BuildingLocalDataStartFurnitureLodconfigVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_BuildingLocalDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_BuildingData_BuildingLocalData
