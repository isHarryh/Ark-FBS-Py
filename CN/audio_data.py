# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BattleVoiceOption_BattleVoiceType(object):
    BATTLE_START = 0
    ENCOUNTER_ENEMY = 1
    PLACE_CHAR = 2
    FOCUS_CHAR = 3
    SKILL_ACTIVE = 4
    SKILL_PASSIVE_IMP = 5
    SKILL_PASSIVE_NOR = 6
    NORMAL_ATTACK = 7
    E_NUM = 8


class enum__Torappu_Audio_Middleware_Data_AudioFadeType(object):
    LINEAR = 0
    CONCAVE = 1


class enum__Torappu_VoiceLangType(object):
    NONE = 0
    JP = 1
    CN_MANDARIN = 2
    EN = 3
    KR = 4
    CN_TOPOLECT = 5
    LINKAGE = 6
    ITA = 7
    GER = 8
    RUS = 9


class clz_Torappu_Audio_Middleware_Data_BGMBank(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_BGMBank()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_BGMBank(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Intro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Loop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Crossfade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def FadeStyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_BGMBank
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_BGMBankStart(builder):
    builder.StartObject(7)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddIntro(builder, intro):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(intro), 0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddLoop(builder, loop):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(loop), 0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddVolume(builder, volume):
    builder.PrependFloat32Slot(2, volume, 0.0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddCrossfade(builder, crossfade):
    builder.PrependFloat32Slot(3, crossfade, 0.0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddDelay(builder, delay):
    builder.PrependFloat32Slot(4, delay, 0.0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddFadeStyleId(builder, fadeStyleId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fadeStyleId), 0)

def clz_Torappu_Audio_Middleware_Data_BGMBankAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Audio_Middleware_Data_BGMBankEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Asset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Important(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Is2D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def MinPitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def MaxPitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def MinVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def MaxVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX
    def IgnoreTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXStart(builder):
    builder.StartObject(10)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddAsset(builder, asset):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(asset), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddImportant(builder, important):
    builder.PrependBoolSlot(2, important, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddIs2D(builder, is2D):
    builder.PrependBoolSlot(3, is2D, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddDelay(builder, delay):
    builder.PrependFloat32Slot(4, delay, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddMinPitch(builder, minPitch):
    builder.PrependFloat32Slot(5, minPitch, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddMaxPitch(builder, maxPitch):
    builder.PrependFloat32Slot(6, maxPitch, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddMinVolume(builder, minVolume):
    builder.PrependFloat32Slot(7, minVolume, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddMaxVolume(builder, maxVolume):
    builder.PrependFloat32Slot(8, maxVolume, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXAddIgnoreTimeScale(builder, ignoreTimeScale):
    builder.PrependBoolSlot(9, ignoreTimeScale, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFXEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_SoundFXBank(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_SoundFXBank()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_SoundFXBank(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def Sounds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_SoundFXBank_SoundFX()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def SoundsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def SoundsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def MaxSoundAllowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def PopOldest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def CustomMixerGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def Loop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Audio_Middleware_Data_SoundFXBank
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_SoundFXBankStart(builder):
    builder.StartObject(6)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddSounds(builder, sounds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sounds), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankStartSoundsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddMaxSoundAllowed(builder, maxSoundAllowed):
    builder.PrependInt32Slot(1, maxSoundAllowed, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddPopOldest(builder, popOldest):
    builder.PrependBoolSlot(2, popOldest, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddCustomMixerGroup(builder, customMixerGroup):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(customMixerGroup), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddLoop(builder, loop):
    builder.PrependBoolSlot(4, loop, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXBankEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank
    def TargetBank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank
    def CtrlStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank
    def CtrlStopFadetime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankStart(builder):
    builder.StartObject(4)

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankAddTargetBank(builder, targetBank):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetBank), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankAddCtrlStop(builder, ctrlStop):
    builder.PrependBoolSlot(1, ctrlStop, 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankAddCtrlStopFadetime(builder, ctrlStopFadetime):
    builder.PrependFloat32Slot(2, ctrlStopFadetime, 0.0)

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBankEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_SnapshotBank(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_SnapshotBank()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_SnapshotBank(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def TargetSnapshot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def HookSoundFxBank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_SnapshotBank
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_SnapshotBankStart(builder):
    builder.StartObject(5)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankAddTargetSnapshot(builder, targetSnapshot):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetSnapshot), 0)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankAddHookSoundFxBank(builder, hookSoundFxBank):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hookSoundFxBank), 0)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankAddDelay(builder, delay):
    builder.PrependFloat32Slot(2, delay, 0.0)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankAddDuration(builder, duration):
    builder.PrependFloat32Slot(3, duration, 0.0)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Audio_Middleware_Data_SnapshotBankEnd(builder):
    return builder.EndObject()



class clz_Torappu_BattleVoiceOption(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BattleVoiceOption()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BattleVoiceOption(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BattleVoiceOption
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BattleVoiceOption
    def VoiceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BattleVoiceOption
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BattleVoiceOption
    def OverlapIfSamePriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BattleVoiceOption
    def Cooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BattleVoiceOption
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_BattleVoiceOptionStart(builder):
    builder.StartObject(5)

def clz_Torappu_BattleVoiceOptionAddVoiceType(builder, voiceType):
    builder.PrependInt32Slot(0, voiceType, 0)

def clz_Torappu_BattleVoiceOptionAddPriority(builder, priority):
    builder.PrependInt32Slot(1, priority, 0)

def clz_Torappu_BattleVoiceOptionAddOverlapIfSamePriority(builder, overlapIfSamePriority):
    builder.PrependBoolSlot(2, overlapIfSamePriority, 0)

def clz_Torappu_BattleVoiceOptionAddCooldown(builder, cooldown):
    builder.PrependFloat32Slot(3, cooldown, 0.0)

def clz_Torappu_BattleVoiceOptionAddDelay(builder, delay):
    builder.PrependFloat32Slot(4, delay, 0.0)

def clz_Torappu_BattleVoiceOptionEnd(builder):
    return builder.EndObject()



class clz_Torappu_BattleVoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BattleVoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BattleVoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BattleVoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BattleVoiceData
    def Crossfade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BattleVoiceData
    def MinTimeDeltaForEnemyEncounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BattleVoiceData
    def MinSpCostForImportantPassiveSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BattleVoiceData
    def VoiceTypeOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BattleVoiceOption()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BattleVoiceData
    def VoiceTypeOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BattleVoiceData
    def VoiceTypeOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_BattleVoiceDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_BattleVoiceDataAddCrossfade(builder, crossfade):
    builder.PrependFloat32Slot(0, crossfade, 0.0)

def clz_Torappu_BattleVoiceDataAddMinTimeDeltaForEnemyEncounter(builder, minTimeDeltaForEnemyEncounter):
    builder.PrependFloat32Slot(1, minTimeDeltaForEnemyEncounter, 0.0)

def clz_Torappu_BattleVoiceDataAddMinSpCostForImportantPassiveSkill(builder, minSpCostForImportantPassiveSkill):
    builder.PrependInt32Slot(2, minSpCostForImportantPassiveSkill, 0)

def clz_Torappu_BattleVoiceDataAddVoiceTypeOptions(builder, voiceTypeOptions):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(voiceTypeOptions), 0)

def clz_Torappu_BattleVoiceDataStartVoiceTypeOptionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BattleVoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_MusicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_MusicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_MusicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_MusicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_MusicData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_MusicData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_MusicData
    def Bank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_MusicDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Audio_Middleware_Data_MusicDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Audio_Middleware_Data_MusicDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Audio_Middleware_Data_MusicDataAddBank(builder, bank):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bank), 0)

def clz_Torappu_Audio_Middleware_Data_MusicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_DuckingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_DuckingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_DuckingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def Bank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def FadeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_DuckingData
    def FadeStyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Audio_Middleware_Data_DuckingDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Audio_Middleware_Data_DuckingDataAddBank(builder, bank):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bank), 0)

def clz_Torappu_Audio_Middleware_Data_DuckingDataAddVolume(builder, volume):
    builder.PrependFloat32Slot(1, volume, 0.0)

def clz_Torappu_Audio_Middleware_Data_DuckingDataAddFadeTime(builder, fadeTime):
    builder.PrependFloat32Slot(2, fadeTime, 0.0)

def clz_Torappu_Audio_Middleware_Data_DuckingDataAddDelay(builder, delay):
    builder.PrependFloat32Slot(3, delay, 0.0)

def clz_Torappu_Audio_Middleware_Data_DuckingDataAddFadeStyleId(builder, fadeStyleId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fadeStyleId), 0)

def clz_Torappu_Audio_Middleware_Data_DuckingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_FadeStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_FadeStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_FadeStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def StyleName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def FadeinTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def FadeoutTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def FadeinType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Audio_Middleware_Data_FadeStyleData
    def FadeoutType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataAddStyleName(builder, styleName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(styleName), 0)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataAddFadeinTime(builder, fadeinTime):
    builder.PrependFloat32Slot(1, fadeinTime, 0.0)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataAddFadeoutTime(builder, fadeoutTime):
    builder.PrependFloat32Slot(2, fadeoutTime, 0.0)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataAddFadeinType(builder, fadeinType):
    builder.PrependInt32Slot(3, fadeinType, 0)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataAddFadeoutType(builder, fadeoutType):
    builder.PrependInt32Slot(4, fadeoutType, 0)

def clz_Torappu_Audio_Middleware_Data_FadeStyleDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VoiceLangType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VoiceLangType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VoiceLangType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VoiceLangType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VoiceLangType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VoiceLangType__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_VoiceLangType__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VoiceLangType__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VoiceLangType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VoiceLangType__stringEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__enum__Torappu_VoiceLangType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__enum__Torappu_VoiceLangType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__enum__Torappu_VoiceLangType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VoiceLangType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__enum__Torappu_VoiceLangType__stringStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__enum__Torappu_VoiceLangType__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__enum__Torappu_VoiceLangType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__enum__Torappu_VoiceLangType__stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__enum__Torappu_VoiceLangType__stringEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__enum__Torappu_VoiceLangType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__stringStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__stringEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_Audio_Middleware_Data_TorappuAudioData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Audio_Middleware_Data_TorappuAudioData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Audio_Middleware_Data_TorappuAudioData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BgmBanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_BGMBank()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BgmBanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BgmBanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxbanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_SoundFXBank()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxbanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxbanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxctrlBanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_SoundFXCtrlBank()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxctrlBanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxctrlBanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SnapshotBanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_SnapshotBank()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SnapshotBanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SnapshotBanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BattleVoice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BattleVoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def Musics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_MusicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def MusicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def MusicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def Duckings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_DuckingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def DuckingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def DuckingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def FadeStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Audio_Middleware_Data_FadeStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def FadeStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def FadeStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxVoiceLang(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__string__list_dict__enum__Torappu_VoiceLangType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxVoiceLangLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def SoundFxVoiceLangIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BankAlias(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BankAliasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Audio_Middleware_Data_TorappuAudioData
    def BankAliasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddBgmBanks(builder, bgmBanks):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bgmBanks), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartBgmBanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddSoundFxbanks(builder, soundFxbanks):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(soundFxbanks), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartSoundFxbanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddSoundFxctrlBanks(builder, soundFxctrlBanks):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(soundFxctrlBanks), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartSoundFxctrlBanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddSnapshotBanks(builder, snapshotBanks):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(snapshotBanks), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartSnapshotBanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddBattleVoice(builder, battleVoice):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(battleVoice), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddMusics(builder, musics):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(musics), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartMusicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddDuckings(builder, duckings):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(duckings), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartDuckingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddFadeStyles(builder, fadeStyles):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(fadeStyles), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartFadeStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddSoundFxVoiceLang(builder, soundFxVoiceLang):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(soundFxVoiceLang), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartSoundFxVoiceLangVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataAddBankAlias(builder, bankAlias):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bankAlias), 0)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataStartBankAliasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Audio_Middleware_Data_TorappuAudioDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_Audio_Middleware_Data_TorappuAudioData
