# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_Resource_ResourceManifest_BundleMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Resource_ResourceManifest_BundleMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Resource_ResourceManifest_BundleMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def Props(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def SccIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def AllDependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def AllDependenciesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def AllDependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Resource_ResourceManifest_BundleMeta
    def AllDependenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_Resource_ResourceManifest_BundleMetaStart(builder):
    builder.StartObject(4)

def clz_Torappu_Resource_ResourceManifest_BundleMetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Resource_ResourceManifest_BundleMetaAddProps(builder, props):
    builder.PrependInt32Slot(1, props, 0)

def clz_Torappu_Resource_ResourceManifest_BundleMetaAddSccIndex(builder, sccIndex):
    builder.PrependInt32Slot(2, sccIndex, 0)

def clz_Torappu_Resource_ResourceManifest_BundleMetaAddAllDependencies(builder, allDependencies):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(allDependencies), 0)

def clz_Torappu_Resource_ResourceManifest_BundleMetaStartAllDependenciesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Resource_ResourceManifest_BundleMetaEnd(builder):
    return builder.EndObject()



class clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Resource_ResourceManifest_AssetToBundleMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta
    def AssetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta
    def BundleIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaStart(builder):
    builder.StartObject(4)

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaAddAssetName(builder, assetName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assetName), 0)

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaAddBundleIndex(builder, bundleIndex):
    builder.PrependInt32Slot(1, bundleIndex, 0)

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaAddPath(builder, path):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)

def clz_Torappu_Resource_ResourceManifest_AssetToBundleMetaEnd(builder):
    return builder.EndObject()



class clz_Torappu_Resource_ResourceManifest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Resource_ResourceManifest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Resource_ResourceManifest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Resource_ResourceManifest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Resource_ResourceManifest
    def RawCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Resource_ResourceManifest
    def Bundles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Resource_ResourceManifest_BundleMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Resource_ResourceManifest
    def BundlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Resource_ResourceManifest
    def BundlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Resource_ResourceManifest
    def AssetToBundleList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Resource_ResourceManifest_AssetToBundleMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Resource_ResourceManifest
    def AssetToBundleListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Resource_ResourceManifest
    def AssetToBundleListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_Resource_ResourceManifestStart(builder):
    builder.StartObject(3)

def clz_Torappu_Resource_ResourceManifestAddRawCount(builder, rawCount):
    builder.PrependInt32Slot(0, rawCount, 0)

def clz_Torappu_Resource_ResourceManifestAddBundles(builder, bundles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bundles), 0)

def clz_Torappu_Resource_ResourceManifestStartBundlesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Resource_ResourceManifestAddAssetToBundleList(builder, assetToBundleList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(assetToBundleList), 0)

def clz_Torappu_Resource_ResourceManifestStartAssetToBundleListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Resource_ResourceManifestEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_Resource_ResourceManifest
