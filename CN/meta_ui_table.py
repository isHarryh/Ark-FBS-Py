# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_CommonUnlockType(object):
    STAGECLEAR = 0
    HASCHAR = 1
    NONE = 2


class enum__Torappu_TipData_Category(object):
    NONE = 0
    BATTLE = 1
    UI = 2
    BUILDING = 4
    GACHA = 8
    MISC = 16
    ALL = 31


class clz_Torappu_StageUnlockParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageUnlockParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageUnlockParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageUnlockParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageUnlockParam
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_StageUnlockParamStart(builder):
    builder.StartObject(1)

def clz_Torappu_StageUnlockParamAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_StageUnlockParamEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharUnlockParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharUnlockParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharUnlockParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharUnlockParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharUnlockParam
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CharUnlockParamStart(builder):
    builder.StartObject(1)

def clz_Torappu_CharUnlockParamAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_CharUnlockParamEnd(builder):
    return builder.EndObject()



class clz_Torappu_CommonAvailCheck(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CommonAvailCheck()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CommonAvailCheck(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CommonAvailCheck
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CommonAvailCheck
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CommonAvailCheck
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CommonAvailCheck
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CommonAvailCheck
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_CommonAvailCheck
    def StageUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageUnlockParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CommonAvailCheck
    def CharUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharUnlockParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_CommonAvailCheckStart(builder):
    builder.StartObject(6)

def clz_Torappu_CommonAvailCheckAddStartTs(builder, startTs):
    builder.PrependInt64Slot(0, startTs, 0)

def clz_Torappu_CommonAvailCheckAddEndTs(builder, endTs):
    builder.PrependInt64Slot(1, endTs, 0)

def clz_Torappu_CommonAvailCheckAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_CommonAvailCheckAddRate(builder, rate):
    builder.PrependFloat32Slot(3, rate, 0.0)

def clz_Torappu_CommonAvailCheckAddStageUnlockParam(builder, stageUnlockParam):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageUnlockParam), 0)

def clz_Torappu_CommonAvailCheckAddCharUnlockParam(builder, charUnlockParam):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(charUnlockParam), 0)

def clz_Torappu_CommonAvailCheckEnd(builder):
    return builder.EndObject()



class clz_Torappu_TipData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TipData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TipData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TipData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TipData
    def Tip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_TipData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TipDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TipDataAddTip(builder, tip):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tip), 0)

def clz_Torappu_TipDataAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_TipDataAddCategory(builder, category):
    builder.PrependInt32Slot(2, category, 0)

def clz_Torappu_TipDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TipsMetaDisplayItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TipsMetaDisplayItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TipsMetaDisplayItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TipsMetaDisplayItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TipsMetaDisplayItem
    def TipsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipsMetaDisplayItem
    def LoadingPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipsMetaDisplayItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TipsMetaDisplayItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipsMetaDisplayItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TipsMetaDisplayItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_TipsMetaDisplayItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TipsMetaDisplayItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_TipsMetaDisplayItem
    def ZoneIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_TipsMetaDisplayItem
    def ZoneIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TipsMetaDisplayItem
    def ZoneIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_TipsMetaDisplayItem
    def Tips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TipsMetaDisplayItem
    def TipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TipsMetaDisplayItem
    def TipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_TipsMetaDisplayItemStart(builder):
    builder.StartObject(8)

def clz_Torappu_TipsMetaDisplayItemAddTipsId(builder, tipsId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tipsId), 0)

def clz_Torappu_TipsMetaDisplayItemAddLoadingPic(builder, loadingPic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPic), 0)

def clz_Torappu_TipsMetaDisplayItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_TipsMetaDisplayItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_TipsMetaDisplayItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(4, isAllStageActive, 0)

def clz_Torappu_TipsMetaDisplayItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_TipsMetaDisplayItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TipsMetaDisplayItemAddZoneIdList(builder, zoneIdList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIdList), 0)

def clz_Torappu_TipsMetaDisplayItemStartZoneIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TipsMetaDisplayItemAddTips(builder, tips):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tips), 0)

def clz_Torappu_TipsMetaDisplayItemStartTipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TipsMetaDisplayItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_FlashAlertAfterStageDisplayMetaItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FlashAlertAfterStageDisplayMetaItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FlashAlertAfterStageDisplayMetaItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def FlashAlertId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def DetailText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def IsBasicInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_FlashAlertAfterStageDisplayMetaItem
    def Times(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemStart(builder):
    builder.StartObject(8)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddFlashAlertId(builder, flashAlertId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(flashAlertId), 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(2, isAllStageActive, 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddDetailText(builder, detailText):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(detailText), 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddIsBasicInfo(builder, isBasicInfo):
    builder.PrependBoolSlot(6, isBasicInfo, 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemAddTimes(builder, times):
    builder.PrependInt32Slot(7, times, 0)

def clz_Torappu_FlashAlertAfterStageDisplayMetaItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_MapPreviewDisplayMetaItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapPreviewDisplayMetaItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapPreviewDisplayMetaItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapPreviewDisplayMetaItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapPreviewDisplayMetaItem
    def MapPreviewPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MapPreviewDisplayMetaItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapPreviewDisplayMetaItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MapPreviewDisplayMetaItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_MapPreviewDisplayMetaItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapPreviewDisplayMetaItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapPreviewDisplayMetaItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_MapPreviewDisplayMetaItemStart(builder):
    builder.StartObject(5)

def clz_Torappu_MapPreviewDisplayMetaItemAddMapPreviewPicId(builder, mapPreviewPicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapPreviewPicId), 0)

def clz_Torappu_MapPreviewDisplayMetaItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_MapPreviewDisplayMetaItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_MapPreviewDisplayMetaItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(3, isAllStageActive, 0)

def clz_Torappu_MapPreviewDisplayMetaItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_MapPreviewDisplayMetaItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapPreviewDisplayMetaItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BattleFinishDisplayMetaItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BattleFinishDisplayMetaItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BattleFinishDisplayMetaItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BattleFinishDisplayMetaItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BattleFinishDisplayMetaItem
    def BattleFinishDisplayKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleFinishDisplayMetaItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BattleFinishDisplayMetaItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BattleFinishDisplayMetaItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BattleFinishDisplayMetaItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_BattleFinishDisplayMetaItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BattleFinishDisplayMetaItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleFinishDisplayMetaItem
    def OverrideStageName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleFinishDisplayMetaItem
    def Signal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleFinishDisplayMetaItem
    def OverrideCharWord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BattleFinishDisplayMetaItemStart(builder):
    builder.StartObject(8)

def clz_Torappu_BattleFinishDisplayMetaItemAddBattleFinishDisplayKey(builder, battleFinishDisplayKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battleFinishDisplayKey), 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(1, isAllStageActive, 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_BattleFinishDisplayMetaItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BattleFinishDisplayMetaItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddOverrideStageName(builder, overrideStageName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(overrideStageName), 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddSignal(builder, signal):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(signal), 0)

def clz_Torappu_BattleFinishDisplayMetaItemAddOverrideCharWord(builder, overrideCharWord):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(overrideCharWord), 0)

def clz_Torappu_BattleFinishDisplayMetaItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BattleLoadingDisplayMetaItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BattleLoadingDisplayMetaItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BattleLoadingDisplayMetaItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BattleLoadingDisplayMetaItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def BattleLoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleLoadingDisplayMetaItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_BattleLoadingDisplayMetaItemStart(builder):
    builder.StartObject(5)

def clz_Torappu_BattleLoadingDisplayMetaItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(0, isAllStageActive, 0)

def clz_Torappu_BattleLoadingDisplayMetaItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_BattleLoadingDisplayMetaItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BattleLoadingDisplayMetaItemAddBattleLoadingPicId(builder, battleLoadingPicId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(battleLoadingPicId), 0)

def clz_Torappu_BattleLoadingDisplayMetaItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_BattleLoadingDisplayMetaItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_BattleLoadingDisplayMetaItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BattleAutoBattleMetaItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BattleAutoBattleMetaItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BattleAutoBattleMetaItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BattleAutoBattleMetaItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BattleAutoBattleMetaItem
    def BattleAutoBattleDisplayKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleAutoBattleMetaItem
    def IsAllStageActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BattleAutoBattleMetaItem
    def RelateActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BattleAutoBattleMetaItem
    def StageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BattleAutoBattleMetaItem
    def StageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BattleAutoBattleMetaItem
    def StageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_BattleAutoBattleMetaItem
    def AvailCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonAvailCheck()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_BattleAutoBattleMetaItemStart(builder):
    builder.StartObject(5)

def clz_Torappu_BattleAutoBattleMetaItemAddBattleAutoBattleDisplayKey(builder, battleAutoBattleDisplayKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battleAutoBattleDisplayKey), 0)

def clz_Torappu_BattleAutoBattleMetaItemAddIsAllStageActive(builder, isAllStageActive):
    builder.PrependBoolSlot(1, isAllStageActive, 0)

def clz_Torappu_BattleAutoBattleMetaItemAddRelateActId(builder, relateActId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(relateActId), 0)

def clz_Torappu_BattleAutoBattleMetaItemAddStageIdList(builder, stageIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdList), 0)

def clz_Torappu_BattleAutoBattleMetaItemStartStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BattleAutoBattleMetaItemAddAvailCheck(builder, availCheck):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(availCheck), 0)

def clz_Torappu_BattleAutoBattleMetaItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_MetaUIDisplayTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MetaUIDisplayTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MetaUIDisplayTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MetaUIDisplayTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MetaUIDisplayTable
    def TipsMetaList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TipsMetaDisplayItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def TipsMetaListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def TipsMetaListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_MetaUIDisplayTable
    def FlashAlertAfterStageItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_FlashAlertAfterStageDisplayMetaItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def FlashAlertAfterStageItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def FlashAlertAfterStageItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MetaUIDisplayTable
    def MapPreviewDisplayMetaItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapPreviewDisplayMetaItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def MapPreviewDisplayMetaItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def MapPreviewDisplayMetaItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleFinishDisplayMetaItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BattleFinishDisplayMetaItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def BattleFinishDisplayMetaItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleFinishDisplayMetaItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleLoadingDisplayMetaItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BattleLoadingDisplayMetaItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def BattleLoadingDisplayMetaItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleLoadingDisplayMetaItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleAutoBattleMetaItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BattleAutoBattleMetaItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MetaUIDisplayTable
    def BattleAutoBattleMetaItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MetaUIDisplayTable
    def BattleAutoBattleMetaItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_MetaUIDisplayTableStart(builder):
    builder.StartObject(6)

def clz_Torappu_MetaUIDisplayTableAddTipsMetaList(builder, tipsMetaList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tipsMetaList), 0)

def clz_Torappu_MetaUIDisplayTableStartTipsMetaListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableAddFlashAlertAfterStageItemList(builder, flashAlertAfterStageItemList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(flashAlertAfterStageItemList), 0)

def clz_Torappu_MetaUIDisplayTableStartFlashAlertAfterStageItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableAddMapPreviewDisplayMetaItemList(builder, mapPreviewDisplayMetaItemList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapPreviewDisplayMetaItemList), 0)

def clz_Torappu_MetaUIDisplayTableStartMapPreviewDisplayMetaItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableAddBattleFinishDisplayMetaItemList(builder, battleFinishDisplayMetaItemList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(battleFinishDisplayMetaItemList), 0)

def clz_Torappu_MetaUIDisplayTableStartBattleFinishDisplayMetaItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableAddBattleLoadingDisplayMetaItemList(builder, battleLoadingDisplayMetaItemList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(battleLoadingDisplayMetaItemList), 0)

def clz_Torappu_MetaUIDisplayTableStartBattleLoadingDisplayMetaItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableAddBattleAutoBattleMetaItemList(builder, battleAutoBattleMetaItemList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(battleAutoBattleMetaItemList), 0)

def clz_Torappu_MetaUIDisplayTableStartBattleAutoBattleMetaItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MetaUIDisplayTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_MetaUIDisplayTable
